#!/usr/bin/env bash
set -eu

mapfile -t graph < <(git-natp)

declare -A commit_to_structurehash
declare -A branch_to_structurehash

function structurehash_commit() {
  id="$1"
  shift
  subject="$1"
  shift
  parents=($@)

  # Translate parent subjects into the structure hashes.
  for i in "${!parents[@]}"
  do
    parent_id=${parents[$i]}
    parents[$i]=${commit_to_structurehash[$parent_id]}
  done

  # Hash.
  structure=($subject ${parents[@]})
  commit_to_structurehash[$id]=$(printf "${structure[*]}" | sha256sum)
}

BRANCH_REGEX="\[[a-zA-Z0-9]+\]"
BRANCH_LINE_REGEX="^\[[a-zA-Z0-9]+_*\] [a-zA-Z0-9]+_*$"

for line in "${graph[@]}"
do
  mapfile -t parts < <(sed "s/[ \t\n][ \t\n]*/\n/g" <<<"$line")
  if [[ $line =~ $BRANCH_REGEX ]]
  then
    branchname=$(echo "${parts[0]}" | sed 's/\[//g;s/\]//g')
    commit="${parts[1]}"
    branch_to_structurehash[$branchname]="${commit_to_structurehash[$commit]}"
  else
    id="${parts[0]}"
    parents="${parts[@]:1}"
    subject=$(echo "$id" | sed 's/_//g')  # Strip disambiguating underscores.
    structurehash_commit "$id" "$subject" $parents
  fi
done

# Check that expected branches are equivalent.
for branch in "${!branch_to_structurehash[@]}"
do
  if git show-ref --verify --quiet "refs/heads/$branch"
  then
    mapfile -t git_graph < <(git rev-list --topo-order --reverse --parents "refs/heads/$branch")
    for entry in "${git_graph[@]}"
    do
      entry=($entry)
      sha=${entry[0]}
      subject=$(git show --no-patch --format=%s "$sha")
      structurehash_commit "$sha" "$subject" "${entry[@]:1}"
    done
    branch_sha=$(git rev-parse "$branch")
    if [[ ${branch_to_structurehash[$branch]} != ${commit_to_structurehash[$branch_sha]} ]]
    then
      echo "Branch $branch has a different structure"
      exit 1
    fi
  else
    echo "Branch $branch does not exist"
    exit 1
  fi
done

# Check that all actual branches are accounted for.
for branch in $(git for-each-ref --format="%(refname:short)" refs/heads/)
do
  if [[ ! -v branch_to_structurehash[$branch] ]]
  then
    echo "Branch $branch exists but was not expected"
    exit 1
  fi
done

echo "Git graph structures are equivalent"
