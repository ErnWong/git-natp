#!/usr/bin/env bash
set -eu

mapfile -t input
row_count="${#input[@]}"
col_count=0
for row in ${!input[@]}
do
  line="${input[row]}"
  line_size="${#line}"
  if [[ $line_size -gt $col_count ]]
  then
    col_count="$line_size"
  fi
done

SUBJECT_CHAR_REGEX="[a-zA-Z0-9]"
SUBJECT_REGEX="^$SUBJECT_CHAR_REGEX+_*$"

LOGGING_LEVEL="quiet"  # "quiet" or "verbose"
log_indent=""

function log_push() {
  [[ $LOGGING_LEVEL = "verbose" ]] && log_indent="$log_indent│" || true
}

function log_pop() {
  [[ $LOGGING_LEVEL = "verbose" ]] && log_indent="${log_indent%│}" || true
}

function log() {
  [[ $LOGGING_LEVEL = "verbose" ]]  && echo "$log_indent$@" >> /dev/stderr || true
}

declare -A tokens
declare -a subjects
declare -A subject_to_coords

log "Tokenization step"
log_push
for col in $(seq 0 $((col_count - 1)))
do
  for row in $(seq 0 $((row_count - 1)))
  do
    coords="$row $col"
    if [[ ! -v tokens[$coords] ]]
    then
      line="${input[$row]}"
      char="${line:$col:1}"
      if [[ $char =~ $SUBJECT_CHAR_REGEX  ]]
      then
        # Retrieve the whole subject.
        subject="$char"
        while true; do
          char="${line:((col + ${#subject})):1}"
          if [[ $char =~ $SUBJECT_CHAR_REGEX  ]]
          then
            subject="$subject$char"
          else
            break
          fi
        done

        # Disambiguate commits with the same subject using underscore suffixes
        original_subject="$subject"
        while [[ -v subject_to_coords[$subject] ]]
        do
          subject="${subject}_"
        done

        log "Found subject $subject @ $coords"

        # Record it in our token tables.
        subject_to_coords[$subject]=$coords
        subjects+=("$subject")
        for subject_col in $(seq $col $((col + ${#original_subject} - 1)))
        do
          char_coords="$row $subject_col"
          tokens[$char_coords]="$subject"
        done
      else
        tokens[$coords]="$char"
      fi
    fi
  done
done
log_pop

function inputat() {
  row=$1
  col=$2
  coords="$row $col"
  if [[ -v tokens[$coords] ]]
  then
    echo "${tokens[$coords]}"
  else
    echo " "
  fi
}

ABOVE=-1
HORIZONTAL=0
BELOW=1

# We want at least one connector between two subjects.
# We keep track using these values
FOUND_CONNECTOR="found-connector"
FINDING_CONNECTOR="finding-connector"

# Accepted characters for connector type.
declare -a CONNECTORS
# Accepted parent directions for connector type, in perspective of the connector.
declare -a CONNECTOR_PARENT_DIRECTIONS
# Accepted child directions for connector type, in perspective of the connector.
declare -a CONNECTOR_CHILD_DIRECTIONS

# Note: Make sure the READAME is updated if you change this table.
CONNECTORS[0]="+"
CONNECTOR_PARENT_DIRECTIONS[0]="$HORIZONTAL $ABOVE $BELOW"
CONNECTOR_CHILD_DIRECTIONS[0]="$HORIZONTAL $ABOVE $BELOW"
CONNECTORS[1]="<"
CONNECTOR_PARENT_DIRECTIONS[1]="$HORIZONTAL"
CONNECTOR_CHILD_DIRECTIONS[1]="$HORIZONTAL $ABOVE $BELOW"
CONNECTORS[2]=">"
CONNECTOR_PARENT_DIRECTIONS[2]="$HORIZONTAL $ABOVE $BELOW"
CONNECTOR_CHILD_DIRECTIONS[2]="$HORIZONTAL"
CONNECTORS[3]=".,_"
CONNECTOR_PARENT_DIRECTIONS[3]="$HORIZONTAL $BELOW"
CONNECTOR_CHILD_DIRECTIONS[3]="$HORIZONTAL $BELOW"
CONNECTORS[4]="'\`^*"
CONNECTOR_PARENT_DIRECTIONS[4]="$HORIZONTAL $ABOVE"
CONNECTOR_CHILD_DIRECTIONS[4]="$HORIZONTAL $ABOVE"
CONNECTORS[5]="-~"
CONNECTOR_PARENT_DIRECTIONS[5]="$HORIZONTAL"
CONNECTOR_CHILD_DIRECTIONS[5]="$HORIZONTAL"
CONNECTORS[6]="/"
CONNECTOR_PARENT_DIRECTIONS[6]="$BELOW"
CONNECTOR_CHILD_DIRECTIONS[6]="$ABOVE"
CONNECTORS[7]="\\"
CONNECTOR_PARENT_DIRECTIONS[7]="$ABOVE"
CONNECTOR_CHILD_DIRECTIONS[7]="$BELOW"

function findparents() {
  parent_direction=$1  # Child's perspective.
  child_direction=$((-parent_direction))  # Connector's/Parent's perspective.
  row=$2
  col=$3
  has_found_connector=$4
  text=$(inputat $row $col)
  log "findparents dir:$child_direction, row:$row, col:$col, text:$text"
  log_push
  if [[ ( $text =~ $SUBJECT_REGEX ) && ( $has_found_connector = $FOUND_CONNECTOR ) ]]
  then
    log "Found parent $text"
    echo "$text"
  else
    for i in "${!CONNECTORS[@]}"
    do
      regex="[${CONNECTORS[i]}]"
      child_direction_acceptable="no"
      for d in ${CONNECTOR_CHILD_DIRECTIONS[i]}
      do
        if [[ $d -eq $child_direction ]]
        then
          child_direction_acceptable="yes"
        fi
      done
      if [[ ( $text =~ $regex ) && ( $child_direction_acceptable = "yes" ) ]]
      then
        log "Found connector $text"
        log_push
        parents=""
        for d in ${CONNECTOR_PARENT_DIRECTIONS[i]}
        do
          log "Exploring direction $d"
          log_push
          parents="$parents $(findparents $d $((row + d)) $((col - 1)) $FOUND_CONNECTOR)"
          log_pop
        done
        log_pop
        echo "$parents"
      fi
    done
  fi
  log_pop
}

# Map from subject to parents.
declare -A subject_to_parents

# Set of subjects that could be a branch name (i.e. no parents nor children).
declare -A branchnames

for subject in "${subjects[@]}"
do
  coords=(${subject_to_coords[$subject]})
  row="${coords[0]}"
  col="${coords[1]}"

  log "Subject: $subject @ ${coords[@]}"
  log_push

  # Insert false positives for now. Prune later.
  branchnames[$subject]=""

  # First find the parents on the left of the subject.
  log "Finding parents to the left"
  log_push
  parents="$(findparents $HORIZONTAL $row $((col - 1)) $FINDING_CONNECTOR)"
  log_pop

  # Then find the parents above the subject.
  log "Finding parents above"
  log_push
  for parent_col in $(seq $((col - 1)) $((col + ${#subject} - 1)))
  do
    parents="$parents $(findparents $ABOVE $((row - 1)) $parent_col $FINDING_CONNECTOR)"
  done
  log_pop

  # Then find the parents below the subject.
  log "Finding parents below"
  log_push
  for parent_col in $(seq $((col - 1)) $((col + ${#subject} - 1)))
  do
    parents="$parents $(findparents $BELOW $((row + 1)) $parent_col $FINDING_CONNECTOR)"
  done
  log_pop

  parents=($parents)

  # Prune branch candidates and branch name candidates.
  for parent in ${parents[@]}
  do
    if [[ -v branchnames[$parent] ]]
    then
      log "Removing branchname candidate $parent because it has child $subject."
      unset branchnames[$parent]
    fi
  done
  if [[ ( ${#parents[@]} -gt 0 ) && ( -v branchnames[$subject] ) ]]
  then
    log "Removing branchname candidate $subject because it has parents ${parents[@]}."
    unset branchnames[$subject]
  fi

  subject_to_parents[$subject]="${parents[@]}"

  log_pop
done

# Find branch names.
for branchname in "${!branchnames[@]}"
do
  branchname_coords=(${subject_to_coords[$branchname]})
  branchname_row="${branchname_coords[0]}"
  branchname_col="${branchname_coords[1]}"
  branch=$(inputat $branchname_row $((branchname_col - 2)))
  log "Branchname coords: ${branchname_coords[@]}"
  if [[ ( -v subject_to_coords[$branch] ) && ( ( ! -v branchnames[$branch] ) || ( -z branchnames[$branch] ) ) ]]
  then
    log "Found commit $branch for branchname $branchname."
    branchnames[$branchname]=$branch
  else
    log "Removing branchname candidate $branchname because '$branch' is not a commit"
    unset branchnames[$branchname]
  fi
done

# Output stage.
for subject in "${subjects[@]}"
do
  if [[ ! -v branchnames[$subject] ]]
  then
    output=($subject ${subject_to_parents[$subject]})
    echo "${output[@]}"
  fi
done
for subject in "${subjects[@]}"
do
  # We didn't loop through branchnames' keys directly because
  # we want to ensure they appear in subject order.
  if [[ -v branchnames[$subject] ]]
  then
    echo "[$subject] ${branchnames[$subject]}"
  fi
done
