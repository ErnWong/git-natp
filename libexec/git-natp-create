#!/usr/bin/env bash
set -eu

mapfile -t graph < <(git-natp)

declare -A subject_to_hash

function create_commit() {
  id="$1"
  subject=$(echo $id | sed 's/_//g')  # Strip disambiguating underscores.
  shift  # Remaining arguments are the parent subjects.
  parents=($@)

  # Translate parent subjects into SHA.
  for i in "${!parents[@]}"
  do
    parent_id=${parents[$i]}
    parents[$i]=${subject_to_hash[$parent_id]}
  done

  # Position HEAD to first parent.
  git checkout "${parents[0]}"

  # Create the commit.
  if [[ ${#parents[@]} -gt 2 ]]
  then
    git merge --no-ff -m $subject --no-edit "${parents[@]:1}" > /dev/null
    touch "$id"
    git add "$id" > /dev/null
    git commit --amend --no-edit > /dev/null
  else
    touch "$id"
    git add "$id" > /dev/null
    git commit --message "$subject" > /dev/null
  fi

  # Save the SHA.
  subjects_to_hash[$id]=$(git rev-parse --short HEAD)
  echo "$subject ${subjects_to_hash[$id]}"
}

function create_branch() {
  branchname="$1"
  commit="$2"
  commit_sha="${subject_to_hash[$commit]}"
  if [[ $branchname == "master" ]]
  then
    # Master branch already exists. Move it to the right place.
    git checkout master
    git reset --hard "$commit_sha"
  else
    # Other branches don't exist. Create them.
    git checkout "$commit_sha"
    git branch "$branchname"
  fi
}

BRANCH_REGEX="\[[a-zA-Z0-9]+\]"

for entry in "${graph[@]}"
do
  entry=($entry)
  if [[ ${entry[0]} =~ $BRANCH_REGEX ]]
  then
    entry[0]=$(echo ${entry[0]} | sed 's/\[//g;s/\]//g')
    create_branch "${entry[@]}"
  else
    create_commit "${entry[@]}"
  fi
done

# Note: master branch will not exist if repo is empty.
if [[ ${#graph[@]} > 0 ]]
then
  git checkout master
fi
