#!/usr/bin/env bash
set -eu

ORPHAN_BRANCH="GIT_NATP_CREATE/ORPHAN_BRANCH"

mapfile -t graph < <(git-natp)

declare -A subject_to_hash
declare -a branchnames

function create_commit() {
  id="$1"
  subject=$(echo $id | sed 's/_//g')  # Strip disambiguating underscores.
  shift  # Remaining arguments are the parent subjects.
  parents=($@)

  # Translate parent subjects into SHA.
  for i in "${!parents[@]}"
  do
    parent_id=${parents[$i]}
    parents[$i]=${subject_to_hash[$parent_id]}
  done

  if [[ ${#parents[@]} -eq 0 ]]
  then
    # Create a temporary orphan branch.
    git checkout --orphan "$ORPHAN_BRANCH"
  else
    # Position HEAD to first parent.
    git checkout "${parents[0]}"
  fi

  # Create the commit.
  if [[ ${#parents[@]} -gt 2 ]]
  then
    git merge --no-ff -m $subject --no-edit "${parents[@]:1}" > /dev/null
    touch "$id"
    git add "$id" > /dev/null
    git commit --amend --no-edit > /dev/null
  else
    touch "$id"
    git add "$id" > /dev/null
    git commit --message "$subject" > /dev/null
  fi

  # Save the SHA.
  subject_to_hash[$id]=$(git rev-parse --short HEAD)

  if [[ ${#parents[@]} -eq 0 ]]
  then
    # Delete the temporary orphan branch.
    git checkout "${subject_to_hash[$id]}"
    git branch -d "$ORPHAN_BRANCH"
  fi
}

function create_branch() {
  branchname="$1"
  commit="$2"
  commit_sha="${subject_to_hash[$commit]}"
  git checkout "$commit_sha"
  git branch "$branchname"
}

BRANCH_REGEX="\[[a-zA-Z0-9]+\]"

for entry in "${graph[@]}"
do
  entry=($entry)
  if [[ ${entry[0]} =~ $BRANCH_REGEX ]]
  then
    entry[0]=$(echo ${entry[0]} | sed 's/\[//g;s/\]//g')
    create_branch "${entry[@]}"
    branchnames+=(${entry[0]})
  else
    create_commit "${entry[@]}"
  fi
done

if [[ ( -v branchnames ) && ( ${#branchnames[@]} > 0 ) ]]
then
  git checkout ${branchnames[0]}
fi
