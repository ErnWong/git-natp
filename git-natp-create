#!/usr/bin/env bash
set -eu

# Quit early if we are in an non-empty directory.
if [[ -n "$(ls -A)" ]]
then
  echo "error: directory is not empty."
  exit 1
fi

# Init a new repo.
git init >/dev/null

mapfile -t graph < <(git-natp)

declare -A subject_to_hash
declare -a branchnames

function create_commit() {
  id="$1"
  subject=$(echo $id | sed 's/_//g')  # Strip disambiguating underscores.
  shift  # Remaining arguments are the parent subjects.
  parents=($@)

  # Translate parent subjects into SHA.
  for i in "${!parents[@]}"
  do
    parent_id=${parents[$i]}
    parents[$i]=${subject_to_hash[$parent_id]}
  done

  # Create the commit.
  tree=$(git write-tree)
  sha=$(git commit-tree ${parents[@]/#/-p } -m "$subject" "$tree")

  # Save the SHA.
  subject_to_hash[$id]="$sha"
}

function create_branch() {
  branchname="$1"
  commit="$2"
  commit_sha="${subject_to_hash[$commit]}"
  git checkout "$commit_sha" >/dev/null 2>&1
  git branch "$branchname" >/dev/null 2>&1
}

BRANCH_REGEX="\[[a-zA-Z0-9]+\]"

for entry in "${graph[@]}"
do
  entry=($entry)
  if [[ ${entry[0]} =~ $BRANCH_REGEX ]]
  then
    entry[0]=$(echo ${entry[0]} | sed 's/\[//g;s/\]//g')
    create_branch "${entry[@]}"
    branchnames+=(${entry[0]})
  else
    create_commit "${entry[@]}"
  fi
done

if [[ ( -v branchnames ) && ( ${#branchnames[@]} > 0 ) ]]
then
  git checkout ${branchnames[0]} >/dev/null 2>&1
fi
