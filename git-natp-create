#!/usr/bin/env bash
set -eu

# Quit early if we are in an non-empty directory.
if [[ -n "$(ls -A)" ]]
then
  echo "error: directory is not empty."
  exit 1
fi

# Setup verbose output file descriptor.
exec {verbose}>/dev/null
if [[ -v VERBOSE ]]
then
  exec {verbose}>&2
fi

# Parse arguments.
declare -A subject_to_command
while (($#))
do
  argument=$1
  shift
  case $argument in
  "--cmd" )
    if (($# < 2))
    then
      echo "fatal: --cmd argument requires two parameters: the commit and the command"
      exit 1
    fi
    subject=$1
    shift
    cmd=$1
    shift
    subject_to_command[$subject]=$cmd
    ;;
  "--verbose")
    exec {verbose}>&2
    ;;
  *)
    echo "fatal: unrecognised argument: $argument"
    exit 1
    ;;
  esac
done

function log() {
  echo "$@" >&$verbose
}

function RUN() {
  echo "RUN $@" >&$verbose
  (eval "$@") 2>&1 | while read line
  do
    echo "| $line" >&$verbose
  done
}

# Init a new repo.
RUN git init

mapfile -t graph < <(git-natp)

declare -A subject_to_hash
declare -a branchnames

ORPHAN_BRANCH="git-natp/orphan-branch"

function create_commit() {
  id="$1"
  subject=$(echo $id | sed 's/_//g')  # Strip disambiguating underscores.
  shift  # Remaining arguments are the parent subjects.
  parents=($@)

  log "Creating commit for $id with parents [${parents[*]}]"

  # Translate parent subjects into SHA.
  for i in "${!parents[@]}"
  do
    parent_id=${parents[$i]}
    parents[$i]=${subject_to_hash[$parent_id]}
  done

  log "Setup working directory to have all files from the parents."
  RUN git read-tree -v "${parents[@]}"
  RUN git checkout-index --all
  RUN git clean -f -d

  log "Add unique commit file."
  mkdir -p commits
  touch "commits/$id"

  if [[ -v subject_to_command[$id] ]]
  then
    log "Running user command for this commit."
    RUN "${subject_to_command[$id]}"
  fi

  log "Stage working directory to index and create commit with this tree."
  RUN git add --all
  tree=$(git write-tree)
  sha=$(git commit-tree ${parents[@]/#/-p } -m "$subject" "$tree")
  subject_to_hash[$id]="$sha"
}

function create_branch() {
  branchname=$(echo "$1" | sed 's/\[//g;s/\]//g')
  branchnames+=($branchname)
  commit="$2"
  commit_sha="${subject_to_hash[$commit]}"
  log "Creating branch $branchname at commit $commit"
  RUN git checkout "$commit_sha"
  RUN git branch "$branchname"
}

BRANCH_LINE_REGEX="^\[[a-zA-Z0-9]+_*\] [a-zA-Z0-9]+_*$"

for line in "${graph[@]}"
do
  mapfile -t parts < <(sed "s/[ \t\n][ \t\n]*/\n/g" <<<"$line")
  if [[ $line =~ $BRANCH_LINE_REGEX ]]
  then
    create_branch "${parts[@]}"
  else
    create_commit "${parts[@]}"
  fi
done

if [[ ( -v branchnames ) && ( ${#branchnames[@]} > 0 ) ]]
then
  log "Checking out the first branch"
  RUN git checkout ${branchnames[0]}
fi
